type_specifier : INT 
Line# 1: Token <ID> Lexeme main found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
type_specifier : INT 
Line# 2: Token <ID> Lexeme a found
Line# 2: Token <LTHIRD> Lexeme [ found
Line# 2: Token <CONST_INT> Lexeme 5 found
Line# 2: Token <RTHIRD> Lexeme ] found
declaration_list : COMMA ID LTHIRD CONST_INT RTHIRD
Line# 2: Token <COMMA> Lexeme , found
Line# 2: Token <ID> Lexeme k found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration: type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 3: Token <ID> Lexeme a found
Line# 3: Token <LTHIRD> Lexeme [ found
Line# 3: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 3: Token <RTHIRD> Lexeme ] found
Line# 3: simple_expression : term
Line# 3: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 3: Token <ASSIGNOP> Lexeme = found
Line# 3: Token <CONST_INT> Lexeme 16 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 3: Token <SEMICOLON> Lexeme ; found
Line# 3: simple_expression : term
Line# 3: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 3: expression_statement : expression SEMICOLON
a=16;
statement : expression_statement
statements : statements statement
Line# 4: Token <ID> Lexeme k found
Line# 4: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 4: Token <ID> Lexeme a found
Line# 4: Token <LTHIRD> Lexeme [ found
Line# 4: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 4: Token <RTHIRD> Lexeme ] found
Line# 4: simple_expression : term
Line# 4: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 4: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression : factor
term : unary_expression
Line# 4: simple_expression : term
Line# 4: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 4: expression_statement : expression SEMICOLON
k=(a);
statement : expression_statement
statements : statements statement
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <ID> Lexeme k found
Line# 5: Token <RPAREN> Lexeme ) found
Line# 5: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 6: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 2
	9--> <k,int> 
	10--> <a,int> 
	ScopeTable# 1
	2--> <main,int> 

À-þB-Vfunc_definition :type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition
program : unit
start : program
