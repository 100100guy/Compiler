type_specifier : INT 
Line# 1: Token <ID> Lexeme x found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 1: Token <ID> Lexeme y found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 1: Token <ID> Lexeme z found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration: type_specifier declaration_list SEMICOLON
unit : var_declaration
program : unit
type_specifier : FLOAT 
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration: type_specifier declaration_list SEMICOLON
unit : var_declaration
program : program unit
type_specifier : INT 
Line# 3: Token <ID> Lexeme var found
Line# 3: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 3: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 3: Token <COMMA> Lexeme , found
type_specifier : INT 
Line# 3: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
unit : func_declaration
program : program unit
type_specifier : INT 
Line# 5: Token <ID> Lexeme foo3 found
Line# 5: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 5: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 5: Token <COMMA> Lexeme , found
type_specifier : INT 
Line# 5: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 5: Token <RPAREN> Lexeme ) found
Line# 5: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
unit : func_declaration
program : program unit
type_specifier : INT 
Line# 7: Token <ID> Lexeme func found
Line# 7: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 7: Token <ID> Lexeme c found
parameter_list : type_specifier ID
Line# 7: Token <COMMA> Lexeme , found
type_specifier : INT 
Line# 7: Token <ID> Lexeme d found
parameter_list : parameter_list COMMA type_specifier ID
Line# 7: Token <RPAREN> Lexeme ) found
Line# 7: Token <LCURL> Lexeme { found
Line# 8: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
Line# 8: simple_expression : term
Line# 8: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 9: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 2
	1--> <c,int> 
	2--> <d,int> 
	ScopeTable# 1
	1--> <y,int> 
	2--> <z,int> 
	5--> <foo3,int> 
	6--> <var,int> 
	10--> <a,float> <func,int> 
	11--> <x,int> 

êAº[ÒUfunc_definition :type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition
program : program unit
type_specifier : INT 
Line# 11: Token <ID> Lexeme correct_foo found
Line# 11: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 11: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 11: Token <COMMA> Lexeme , found
type_specifier : FLOAT 
Line# 11: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <LCURL> Lexeme { found
Line# 12: Token <ID> Lexeme a found
Line# 12: Token <ADDOP> Lexeme + found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 12: simple_expression : term
Line# 12: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 12: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
Line# 12: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 13: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 3
	10--> <a,int> 
	11--> <b,float> 
	ScopeTable# 1
	1--> <y,int> 
	2--> <z,int> 
	5--> <foo3,int> 
	6--> <var,int> 
	9--> <correct_foo,int> 
	10--> <a,float> <func,int> 
	11--> <x,int> 

0Äº[ÒUfunc_definition :type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition
program : program unit
type_specifier : VOID 
Line# 16: Token <ID> Lexeme foo found
Line# 16: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 16: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 16: Token <RPAREN> Lexeme ) found
Line# 16: Token <LCURL> Lexeme { found
Line# 17: Token <ID> Lexeme y found
Line# 17: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 17: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 17: Token <SEMICOLON> Lexeme ; found
Line# 17: simple_expression : term
Line# 17: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 17: expression_statement : expression SEMICOLON
y=6;
statement : expression_statement
statements : statement
Line# 18: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 4
	10--> <a,int> 
	ScopeTable# 1
	1--> <y,int> 
	2--> <z,int> 
	5--> <foo3,int> 
	6--> <var,int> <foo,void> 
	9--> <correct_foo,int> 
	10--> <a,float> <func,int> 
	11--> <x,int> 

0Äº[ÒUfunc_definition :type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition
program : program unit
type_specifier : INT 
Line# 20: Token <ID> Lexeme foo2 found
Line# 20: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 20: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 20: Token <COMMA> Lexeme , found
type_specifier : INT 
Line# 20: Token <ID> Lexeme a found
parameter_list : parameter_list COMMA type_specifier ID
Line# 20: Token <COMMA> Lexeme , found
type_specifier : FLOAT 
Line# 20: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 20: Token <RPAREN> Lexeme ) found
Line# 20: Token <LCURL> Lexeme { found
Line# 21: Token <ID> Lexeme a found
Line# 21: Token <ADDOP> Lexeme + found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 21: simple_expression : term
Line# 21: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 21: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
Line# 21: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 22: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 5
	10--> <a,int> 
	11--> <b,float> 
	ScopeTable# 1
	1--> <y,int> 
	2--> <z,int> 
	4--> <foo2,int> 
	5--> <foo3,int> 
	6--> <var,int> <foo,void> 
	9--> <correct_foo,int> 
	10--> <a,float> <func,int> 
	11--> <x,int> 

–Ω[ÒUfunc_definition :type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition
program : program unit
type_specifier : VOID 
Line# 24: Token <ID> Lexeme foo3 found
Line# 24: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 24: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 24: Token <COMMA> Lexeme , found
type_specifier : INT 
Line# 24: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 24: Token <RPAREN> Lexeme ) found
Line# 24: Token <LCURL> Lexeme { found
Line# 25: Token <ID> Lexeme y found
Line# 25: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 25: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 25: Token <SEMICOLON> Lexeme ; found
Line# 25: simple_expression : term
Line# 25: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 25: expression_statement : expression SEMICOLON
y=7;
statement : expression_statement
statements : statement
Line# 26: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 6
	10--> <a,int> 
	11--> <b,int> 
	ScopeTable# 1
	1--> <y,int> 
	2--> <z,int> 
	4--> <foo2,int> 
	5--> <foo3,int> 
	6--> <var,int> <foo,void> 
	9--> <correct_foo,int> 
	10--> <a,float> <func,int> 
	11--> <x,int> 

–Ω[ÒUfunc_definition :type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition
program : program unit
type_specifier : INT 
Line# 28: Token <ID> Lexeme z found
Line# 28: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 28: Token <ID> Lexeme d found
parameter_list : type_specifier ID
Line# 28: Token <RPAREN> Lexeme ) found
Line# 28: Token <LCURL> Lexeme { found
Line# 29: Token <ID> Lexeme d found
Line# 29: Token <SEMICOLON> Lexeme ; found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 29: simple_expression : term
Line# 29: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 30: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 7
	2--> <d,int> 
	ScopeTable# 1
	1--> <y,int> 
	2--> <z,int> 
	4--> <foo2,int> 
	5--> <foo3,int> 
	6--> <var,int> <foo,void> 
	9--> <correct_foo,int> 
	10--> <a,float> <func,int> 
	11--> <x,int> 

êvΩ[ÒUfunc_definition :type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition
program : program unit
type_specifier : INT 
Line# 32: Token <ID> Lexeme var found
Line# 32: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 32: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 32: Token <RPAREN> Lexeme ) found
Line# 32: Token <LCURL> Lexeme { found
Line# 33: Token <ID> Lexeme a found
Line# 33: Token <SEMICOLON> Lexeme ; found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 33: simple_expression : term
Line# 33: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 34: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 8
	10--> <a,int> 
	ScopeTable# 1
	1--> <y,int> 
	2--> <z,int> 
	4--> <foo2,int> 
	5--> <foo3,int> 
	6--> <var,int> <foo,void> 
	9--> <correct_foo,int> 
	10--> <a,float> <func,int> 
	11--> <x,int> 

êvΩ[ÒUfunc_definition :type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition
program : program unit
type_specifier : VOID 
Line# 36: Token <ID> Lexeme foo4 found
Line# 36: Token <LPAREN> Lexeme ( found
type_specifier : INT 
Line# 36: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 36: Token <RPAREN> Lexeme ) found
Line# 36: Token <LCURL> Lexeme { found
Line# 37: Token <ID> Lexeme a found
Line# 37: Token <ADDOP> Lexeme + found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 37: simple_expression : term
Line# 37: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 37: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
Line# 37: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
Line# 37: Return type mismatch Ñ,≠˚
statements : statement
Line# 38: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 9
	10--> <a,int> 
	ScopeTable# 1
	1--> <y,int> 
	2--> <z,int> 
	4--> <foo2,int> 
	5--> <foo3,int> 
	6--> <var,int> <foo,void> <foo4,void> 
	9--> <correct_foo,int> 
	10--> <a,float> <func,int> 
	11--> <x,int> 

–Ω[ÒUfunc_definition :type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition
program : program unit
type_specifier : INT 
Line# 40: Token <ID> Lexeme main found
Line# 40: Token <LPAREN> Lexeme ( found
Line# 40: Token <RPAREN> Lexeme ) found
Line# 40: Token <LCURL> Lexeme { found
type_specifier : INT 
Line# 41: Token <ID> Lexeme a found
Line# 41: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 41: Token <ID> Lexeme b found
Line# 41: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 41: Token <ID> Lexeme c found
Line# 41: Token <LTHIRD> Lexeme [ found
Line# 41: Token <CONST_INT> Lexeme 4 found
Line# 41: Token <RTHIRD> Lexeme ] found
declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD
Line# 41: Token <COMMA> Lexeme , found
Line# 41: Token <ID> Lexeme dd found
Line# 41: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 41: Token <ID> Lexeme ee found
Line# 41: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration: type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
type_specifier : VOID 
Line# 42: Token <ID> Lexeme e found
Line# 42: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration: type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statements statement
type_specifier : FLOAT 
Line# 43: Token <ID> Lexeme a found
Line# 43: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 43: Token <ID> Lexeme c found
Line# 43: Token <LTHIRD> Lexeme [ found
Line# 43: Token <CONST_INT> Lexeme 7 found
Line# 43: Token <RTHIRD> Lexeme ] found
declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD
Line# 43: Token <SEMICOLON> Lexeme ; found
var_declaration: type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statements statement
Line# 45: Token <ID> Lexeme func found
Line# 45: Token <LPAREN> Lexeme ( found
Line# 45: Token <CONST_FLOAT> Lexeme 2.5 found
factor : CONST_FLOAT
unary_expression : factor
term : unary_expression
Line# 45: Token <COMMA> Lexeme , found
Line# 45: simple_expression : term
Line# 45: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 45: Token <CONST_FLOAT> Lexeme 3.5 found
factor : CONST_FLOAT
unary_expression : factor
term : unary_expression
Line# 45: Token <RPAREN> Lexeme ) found
Line# 45: simple_expression : term
Line# 45: rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
Line# 7: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 45: Token <SEMICOLON> Lexeme ; found
Line# 45: simple_expression : term
Line# 45: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 45: expression_statement : expression SEMICOLON
func((2.5),(3.5));
statement : expression_statement
statements : statements statement
Line# 48: Token <ID> Lexeme a found
Line# 48: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 48: Token <ID> Lexeme correct_foo found
Line# 48: Token <LPAREN> Lexeme ( found
Line# 48: Token <ID> Lexeme a found
Line# 48: Token <COMMA> Lexeme , found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 48: simple_expression : term
Line# 48: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 48: Token <ID> Lexeme c found
Line# 48: Token <RPAREN> Lexeme ) found
variable : id
Line# 48: type mismatch(not variable) 'c'
factor : variable
unary_expression : factor
term : unary_expression
Line# 48: simple_expression : term
Line# 48: rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
Line# 7: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 48: Token <SEMICOLON> Lexeme ; found
Line# 48: simple_expression : term
Line# 48: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 48: expression_statement : expression SEMICOLON
a=correct_foo((a),(c));
statement : expression_statement
statements : statements statement
Line# 49: Token <ID> Lexeme b found
Line# 49: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 49: Token <ID> Lexeme correct_foo found
Line# 49: Token <LPAREN> Lexeme ( found
Line# 49: Token <ID> Lexeme a found
Line# 49: Token <RPAREN> Lexeme ) found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 49: simple_expression : term
Line# 49: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
Line# 7: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 49: Token <SEMICOLON> Lexeme ; found
Line# 49: simple_expression : term
Line# 49: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 49: expression_statement : expression SEMICOLON
b=correct_foo((a));
statement : expression_statement
statements : statements statement
Line# 50: Token <ID> Lexeme dd found
Line# 50: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 50: Token <ID> Lexeme correct_foo found
Line# 50: Token <LPAREN> Lexeme ( found
Line# 50: Token <ID> Lexeme a found
Line# 50: Token <COMMA> Lexeme , found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 50: simple_expression : term
Line# 50: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 50: Token <ID> Lexeme b found
Line# 50: Token <COMMA> Lexeme , found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 50: simple_expression : term
Line# 50: rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
Line# 50: Token <ID> Lexeme a found
Line# 50: Token <RPAREN> Lexeme ) found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 50: simple_expression : term
Line# 50: rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
Line# 7: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 50: Token <SEMICOLON> Lexeme ; found
Line# 50: simple_expression : term
Line# 50: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 50: expression_statement : expression SEMICOLON
dd=correct_foo((a),(b),(a));
statement : expression_statement
statements : statements statement
Line# 52: Token <ID> Lexeme k found
Line# 52: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 52: Undeclared variable 'k'
Line# 52: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 52: Token <ADDOP> Lexeme + found
Line# 52: simple_expression : term
Line# 52: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 52: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
Line# 52: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 52: expression_statement : expression SEMICOLON
k=5+2;
statement : expression_statement
statements : statements statement
Line# 53: Token <ID> Lexeme b found
Line# 53: Token <LTHIRD> Lexeme [ found
Line# 53: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 53: Token <RTHIRD> Lexeme ] found
Line# 53: simple_expression : term
Line# 53: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 53: 'b'is not an array'b'
Line# 53: Token <ASSIGNOP> Lexeme = found
Line# 53: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 53: Token <SEMICOLON> Lexeme ; found
Line# 53: simple_expression : term
Line# 53: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 53: expression_statement : expression SEMICOLON
b[5]=7;
statement : expression_statement
statements : statements statement
Line# 54: Token <ID> Lexeme c found
Line# 54: Token <LTHIRD> Lexeme [ found
Line# 54: Token <CONST_FLOAT> Lexeme 2.5 found
factor : CONST_FLOAT
unary_expression : factor
term : unary_expression
Line# 54: Token <RTHIRD> Lexeme ] found
Line# 54: simple_expression : term
Line# 54: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 54: Array subscript is not an integerLine# 54: Token <ASSIGNOP> Lexeme = found
Line# 54: Token <CONST_INT> Lexeme 8 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 54: Token <SEMICOLON> Lexeme ; found
Line# 54: simple_expression : term
Line# 54: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 54: expression_statement : expression SEMICOLON
c[(2.5)]=8;
statement : expression_statement
statements : statements statement
Line# 55: Token <ID> Lexeme c found
Line# 55: Token <LTHIRD> Lexeme [ found
Line# 55: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 55: Token <RTHIRD> Lexeme ] found
Line# 55: simple_expression : term
Line# 55: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 55: Token <ASSIGNOP> Lexeme = found
Line# 55: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 55: Token <ADDOP> Lexeme + found
Line# 55: simple_expression : term
Line# 55: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 55: Token <MULOP> Lexeme * found
Line# 55: Token <ID> Lexeme foo4 found
Line# 55: Token <LPAREN> Lexeme ( found
Line# 55: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 55: Token <RPAREN> Lexeme ) found
Line# 55: simple_expression : term
Line# 55: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
Line# 3: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : term MULOP unary_expression
Line# 55: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
Line# 55: rel_expression : simple_expression
logic_expression : rel_expression
Line# 55: Void cannot be used in expression
expression : variable ASSIGNOP logic_expression
Line# 55: expression_statement : expression SEMICOLON
c[0]=2+5*foo4(7);
statement : expression_statement
statements : statements statement
Line# 56: Token <ID> Lexeme c found
Line# 56: Token <LTHIRD> Lexeme [ found
Line# 56: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 56: Token <RTHIRD> Lexeme ] found
Line# 56: simple_expression : term
Line# 56: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 56: Token <ASSIGNOP> Lexeme = found
Line# 56: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 56: Token <SEMICOLON> Lexeme ; found
Line# 56: simple_expression : term
Line# 56: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 56: expression_statement : expression SEMICOLON
c[1]=5;
statement : expression_statement
statements : statements statement
Line# 57: Token <ID> Lexeme foo4 found
Line# 57: Token <LPAREN> Lexeme ( found
Line# 57: Token <ID> Lexeme c found
Line# 57: Token <LTHIRD> Lexeme [ found
Line# 57: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 57: Token <RTHIRD> Lexeme ] found
Line# 57: simple_expression : term
Line# 57: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 57: Token <RPAREN> Lexeme ) found
factor : variable
unary_expression : factor
term : unary_expression
Line# 57: simple_expression : term
Line# 57: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
Line# 3: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 57: Token <SEMICOLON> Lexeme ; found
Line# 57: simple_expression : term
Line# 57: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 57: expression_statement : expression SEMICOLON
foo4((c[1]));
statement : expression_statement
statements : statements statement
Line# 58: Token <ID> Lexeme c found
Line# 58: Token <LTHIRD> Lexeme [ found
Line# 58: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 58: Token <RTHIRD> Lexeme ] found
Line# 58: simple_expression : term
Line# 58: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 58: Token <ASSIGNOP> Lexeme = found
Line# 58: Token <ID> Lexeme foo4 found
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <ID> Lexeme c found
Line# 58: Token <LTHIRD> Lexeme [ found
Line# 58: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 58: Token <RTHIRD> Lexeme ] found
Line# 58: simple_expression : term
Line# 58: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 58: Token <RPAREN> Lexeme ) found
factor : variable
unary_expression : factor
term : unary_expression
Line# 58: simple_expression : term
Line# 58: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
Line# 3: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 58: Token <SEMICOLON> Lexeme ; found
Line# 58: simple_expression : term
Line# 58: rel_expression : simple_expression
logic_expression : rel_expression
Line# 58: Void cannot be used in expression
expression : variable ASSIGNOP logic_expression
Line# 58: expression_statement : expression SEMICOLON
c[2]=foo4((c[1]));
statement : expression_statement
statements : statements statement
Line# 59: Token <ID> Lexeme c found
Line# 59: Token <LTHIRD> Lexeme [ found
Line# 59: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 59: Token <RTHIRD> Lexeme ] found
Line# 59: simple_expression : term
Line# 59: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 59: Token <ASSIGNOP> Lexeme = found
Line# 59: Token <CONST_FLOAT> Lexeme 2.7 found
factor : CONST_FLOAT
unary_expression : factor
term : unary_expression
Line# 59: Token <SEMICOLON> Lexeme ; found
Line# 59: simple_expression : term
Line# 59: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 59: expression_statement : expression SEMICOLON
c[3]=(2.7);
statement : expression_statement
statements : statements statement
Line# 60: Token <ID> Lexeme b found
Line# 60: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 60: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 60: Token <MULOP> Lexeme % found
Line# 60: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 60: Token <SEMICOLON> Lexeme ; found
Line# 60: simple_expression : term
Line# 60: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 60: expression_statement : expression SEMICOLON
b=5%0;
statement : expression_statement
statements : statements statement
Line# 61: Token <ID> Lexeme b found
Line# 61: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 61: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 61: Token <MULOP> Lexeme % found
Line# 61: Token <CONST_FLOAT> Lexeme 3.5 found
factor : CONST_FLOAT
unary_expression : factor
Line# 61: Non-Integer operand on modulus operator
term : term MULOP unary_expression
Line# 61: Token <SEMICOLON> Lexeme ; found
Line# 61: simple_expression : term
Line# 61: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 61: expression_statement : expression SEMICOLON
b=2%(3.5);
statement : expression_statement
statements : statements statement
Line# 63: Token <ID> Lexeme dd found
Line# 63: Token <ASSIGNOP> Lexeme = found
variable : id
Line# 63: Token <ID> Lexeme foo5 found
Line# 63: Token <LPAREN> Lexeme ( found
Line# 63: Token <ID> Lexeme a found
Line# 63: Token <RPAREN> Lexeme ) found
variable : id
factor : variable
unary_expression : factor
term : unary_expression
Line# 63: simple_expression : term
Line# 63: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
Line# 0: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 63: Token <SEMICOLON> Lexeme ; found
Line# 63: simple_expression : term
Line# 63: rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
Line# 63: expression_statement : expression SEMICOLON
dd=foo5((a));
statement : expression_statement
statements : statements statement
Line# 68: Token <ID> Lexeme printf found
Line# 68: Token <LPAREN> Lexeme ( found
Line# 68: Token <ID> Lexeme h found
Line# 68: Token <RPAREN> Lexeme ) found
variable : id
Line# 68: Undeclared variable 'h'
factor : variable
unary_expression : factor
term : unary_expression
Line# 68: simple_expression : term
Line# 68: rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
Line# 0: factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 68: Token <SEMICOLON> Lexeme ; found
Line# 68: simple_expression : term
Line# 68: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 68: expression_statement : expression SEMICOLON
printf((h));
statement : expression_statement
statements : statements statement
Line# 69: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 69: Token <SEMICOLON> Lexeme ; found
Line# 69: simple_expression : term
Line# 69: rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 72: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL

	ScopeTable# 10
	1--> <c,int> 
	4--> <ee,int> 
	8--> <dd,int> 
	10--> <a,int> 
	11--> <b,int> 
	ScopeTable# 1
	1--> <y,int> 
	2--> <z,int> <main,int> 
	4--> <foo2,int> 
	5--> <foo3,int> 
	6--> <var,int> <foo,void> <foo4,void> 
	9--> <correct_foo,int> 
	10--> <a,float> <func,int> 
	11--> <x,int> 

@c¡[ÒUfunc_definition :type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition
program : program unit
start : program
